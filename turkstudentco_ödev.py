# -*- coding: utf-8 -*-
"""TurkStudentCo_Ödev.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YoScgyOd3ceKqqfNLcfKutndQvaO_45y

**To-Do List (Yapılacaklar Listesi)**
"""

# Task sınıfı: Görev adı ve tamamlanma durumunu saklar
class Task:
    def __init__(self, name):
        self.name = name
        self.completed = False

    def mark_completed(self):
        self.completed = True

    def __str__(self):
        status = "Tamamlandı" if self.completed else "Tamamlanmadı"
        return f"{self.name} [{status}]"


# TaskManager sınıfı: Görevleri yönetir
class TaskManager:
    def __init__(self, file_name="tasks.txt"):
        self.tasks = []
        self.file_name = file_name
        self.load_tasks()

    def add_task(self, name):
        task = Task(name)
        self.tasks.append(task)

    def mark_task_completed(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks[index].mark_completed()

    def delete_task(self, index):
        if 0 <= index < len(self.tasks):
            del self.tasks[index]

    def list_tasks(self):
        completed_tasks = [task for task in self.tasks if task.completed]
        pending_tasks = [task for task in self.tasks if not task.completed]
        return pending_tasks, completed_tasks

    def save_tasks(self):
        with open(self.file_name, "w") as file:
            for task in self.tasks:
                file.write(f"{task.name}|{task.completed}\n")

    def load_tasks(self):
        try:
            with open(self.file_name, "r") as file:
                for line in file:
                    name, completed = line.strip().split("|")
                    task = Task(name)
                    task.completed = completed == "True"
                    self.tasks.append(task)
        except FileNotFoundError:
            pass


# Ana program
def main():
    manager = TaskManager()

    while True:
        print("\nYapılacaklar Listesi:")
        pending, completed = manager.list_tasks()

        print("\nTamamlanmayan Görevler:")
        for i, task in enumerate(pending):
            print(f"{i + 1}. {task}")

        print("\nTamamlanan Görevler:")
        for i, task in enumerate(completed):
            print(f"{i + 1}. {task}")

        print("\nSeçenekler:")
        print("1. Görev Ekle")
        print("2. Görev Tamamla")
        print("3. Görev Sil")
        print("4. Çık ve Kaydet")

        choice = input("Seçiminizi yapın: ")

        if choice == "1":
            name = input("Görev adı: ")
            manager.add_task(name)
        elif choice == "2":
            index = int(input("Tamamlanacak görevin numarası: ")) - 1
            manager.mark_task_completed(index)
        elif choice == "3":
            index = int(input("Silinecek görevin numarası: ")) - 1
            manager.delete_task(index)
        elif choice == "4":
            manager.save_tasks()
            print("Görevler kaydedildi. Çıkılıyor...")
            break
        else:
            print("Geçersiz seçim, tekrar deneyin!")


if __name__ == "__main__":
    main()

"""**Basit Banka Sistemi**"""

# Kullanici sınıfı: Kullanıcı bilgilerini ve işlemlerini yönetir
class Kullanici:
    def __init__(self, ad, hesap_no, bakiye):
        self.ad = ad
        self.hesap_no = hesap_no
        self.bakiye = bakiye

    def para_yatir(self, miktar):
        if miktar > 0:
            self.bakiye += miktar
            return True
        return False

    def para_cek(self, miktar):
        if 0 < miktar <= self.bakiye:
            self.bakiye -= miktar
            return True
        return False

    def bakiye_sorgula(self):
        return self.bakiye

    def __str__(self):
        return f"Ad: {self.ad}, Hesap No: {self.hesap_no}, Bakiye: {self.bakiye} TL"


# Banka sınıfı: Birden fazla kullanıcıyı ve işlemleri yönetir
class Banka:
    def __init__(self):
        self.kullanicilar = {}

    def hesap_olustur(self, ad, hesap_no, bakiye):
        if hesap_no in self.kullanicilar:
            return False  # Aynı hesap numarası varsa işlem başarısız
        yeni_kullanici = Kullanici(ad, hesap_no, bakiye)
        self.kullanicilar[hesap_no] = yeni_kullanici
        return True

    def kullanici_bul(self, hesap_no):
        return self.kullanicilar.get(hesap_no, None)

    def para_yatir(self, hesap_no, miktar):
        kullanici = self.kullanici_bul(hesap_no)
        if kullanici:
            return kullanici.para_yatir(miktar)
        return False

    def para_cek(self, hesap_no, miktar):
        kullanici = self.kullanici_bul(hesap_no)
        if kullanici:
            return kullanici.para_cek(miktar)
        return False

    def bakiye_sorgula(self, hesap_no):
        kullanici = self.kullanici_bul(hesap_no)
        if kullanici:
            return kullanici.bakiye_sorgula()
        return None

    def listele_kullanicilar(self):
        return list(self.kullanicilar.values())


# Ana program
def main():
    banka = Banka()

    while True:
        print("\nBasit Banka Sistemi")
        print("1. Hesap Oluştur")
        print("2. Para Yatır")
        print("3. Para Çek")
        print("4. Bakiye Sorgula")
        print("5. Kullanıcıları Listele")
        print("6. Çıkış")

        secim = input("Seçiminizi yapın: ")

        if secim == "1":
            ad = input("Ad: ")
            hesap_no = input("Hesap Numarası: ")
            try:
                bakiye = float(input("Başlangıç Bakiyesi: "))
                if bakiye < 0:
                    print("Başlangıç bakiyesi negatif olamaz!")
                    continue
                if banka.hesap_olustur(ad, hesap_no, bakiye):
                    print("Hesap başarıyla oluşturuldu!")
                else:
                    print("Bu hesap numarası zaten mevcut!")
            except ValueError:
                print("Geçersiz bakiye girdiniz!")
        elif secim == "2":
            hesap_no = input("Hesap Numarası: ")
            try:
                miktar = float(input("Yatırılacak Miktar: "))
                if banka.para_yatir(hesap_no, miktar):
                    print("Para başarıyla yatırıldı!")
                else:
                    print("Hesap bulunamadı veya geçersiz miktar!")
            except ValueError:
                print("Geçersiz miktar girdiniz!")
        elif secim == "3":
            hesap_no = input("Hesap Numarası: ")
            try:
                miktar = float(input("Çekilecek Miktar: "))
                if banka.para_cek(hesap_no, miktar):
                    print("Para başarıyla çekildi!")
                else:
                    print("Hesap bulunamadı veya bakiye yetersiz!")
            except ValueError:
                print("Geçersiz miktar girdiniz!")
        elif secim == "4":
            hesap_no = input("Hesap Numarası: ")
            bakiye = banka.bakiye_sorgula(hesap_no)
            if bakiye is not None:
                print(f"Mevcut Bakiye: {bakiye} TL")
            else:
                print("Hesap bulunamadı!")
        elif secim == "5":
            print("\nKullanıcılar:")
            for kullanici in banka.listele_kullanicilar():
                print(kullanici)
        elif secim == "6":
            print("Çıkılıyor...")
            break
        else:
            print("Geçersiz seçim, tekrar deneyin!")


if __name__ == "__main__":
    main()

"""**Kütüphane Yönetim Sistemi**"""

# Kitap sınıfı: Kitap bilgilerini ve durumunu yönetir
class Kitap:
    def __init__(self, kitap_adi, yazar_adi):
        self.kitap_adi = kitap_adi
        self.yazar_adi = yazar_adi
        self.odunc_alindi = False

    def odunc_ver(self):
        if not self.odunc_alindi:
            self.odunc_alindi = True
            return True
        return False

    def geri_al(self):
        if self.odunc_alindi:
            self.odunc_alindi = False
            return True
        return False

    def __str__(self):
        durum = "Ödünç Alındı" if self.odunc_alindi else "Mevcut"
        return f"Kitap: {self.kitap_adi}, Yazar: {self.yazar_adi}, Durum: {durum}"


# Kutuphane sınıfı: Kitapları ve işlemleri yönetir
class Kutuphane:
    def __init__(self):
        self.kitaplar = []

    def kitap_ekle(self, kitap_adi, yazar_adi):
        yeni_kitap = Kitap(kitap_adi, yazar_adi)
        self.kitaplar.append(yeni_kitap)

    def mevcut_kitaplar(self):
        return [kitap for kitap in self.kitaplar if not kitap.odunc_alindi]

    def odunc_alinan_kitaplar(self):
        return [kitap for kitap in self.kitaplar if kitap.odunc_alindi]

    def kitap_odunc_ver(self, kitap_adi):
        for kitap in self.kitaplar:
            if kitap.kitap_adi == kitap_adi and not kitap.odunc_alindi:
                return kitap.odunc_ver()
        return False

    def kitap_geri_al(self, kitap_adi):
        for kitap in self.kitaplar:
            if kitap.kitap_adi == kitap_adi and kitap.odunc_alindi:
                return kitap.geri_al()
        return False


# Ana program
def main():
    kutuphane = Kutuphane()

    while True:
        print("\nKütüphane Yönetim Sistemi")
        print("1. Kitap Ekle")
        print("2. Mevcut Kitapları Listele")
        print("3. Ödünç Verilen Kitapları Listele")
        print("4. Kitap Ödünç Ver")
        print("5. Kitap Geri Al")
        print("6. Çıkış")

        secim = input("Seçiminizi yapın: ")

        if secim == "1":
            kitap_adi = input("Kitap Adı: ")
            yazar_adi = input("Yazar Adı: ")
            kutuphane.kitap_ekle(kitap_adi, yazar_adi)
            print(f"{kitap_adi} kitabı başarıyla eklendi!")
        elif secim == "2":
            mevcut = kutuphane.mevcut_kitaplar()
            if mevcut:
                print("\nMevcut Kitaplar:")
                for kitap in mevcut:
                    print(kitap)
            else:
                print("Mevcut kitap bulunmamaktadır!")
        elif secim == "3":
            odunc = kutuphane.odunc_alinan_kitaplar()
            if odunc:
                print("\nÖdünç Alınan Kitaplar:")
                for kitap in odunc:
                    print(kitap)
            else:
                print("Ödünç alınan kitap bulunmamaktadır!")
        elif secim == "4":
            kitap_adi = input("Ödünç verilecek kitabın adı: ")
            if kutuphane.kitap_odunc_ver(kitap_adi):
                print(f"{kitap_adi} başarıyla ödünç verildi!")
            else:
                print(f"{kitap_adi} ödünç verilemedi! Kitap mevcut olmayabilir.")
        elif secim == "5":
            kitap_adi = input("Geri alınacak kitabın adı: ")
            if kutuphane.kitap_geri_al(kitap_adi):
                print(f"{kitap_adi} başarıyla geri alındı!")
            else:
                print(f"{kitap_adi} geri alınamadı! Kitap ödünçte olmayabilir.")
        elif secim == "6":
            print("Çıkılıyor...")
            break
        else:
            print("Geçersiz seçim, tekrar deneyin!")


if __name__ == "__main__":
    main()

"""**Hava Durumu Uygulaması**"""

# Sehir sınıfı: Şehir adı ve sıcaklık bilgilerini saklar
class Sehir:
    def __init__(self, ad, sicaklik):
        self.ad = ad
        self.sicaklik = sicaklik

    def sicaklik_guncelle(self, yeni_sicaklik):
        self.sicaklik = yeni_sicaklik

    def __str__(self):
        return f"Şehir: {self.ad}, Sıcaklık: {self.sicaklik}°C"


# HavaDurumu sınıfı: Şehir ekleme, sıcaklık güncelleme ve tavsiye verme işlemleri
class HavaDurumu:
    def __init__(self):
        self.sehirler = {}

    def sehir_ekle(self, ad, sicaklik):
        if ad in self.sehirler:
            return False  # Şehir zaten eklenmiş
        yeni_sehir = Sehir(ad, sicaklik)
        self.sehirler[ad] = yeni_sehir
        return True

    def sehir_bul(self, ad):
        return self.sehirler.get(ad, None)

    def sicaklik_guncelle(self, ad, yeni_sicaklik):
        sehir = self.sehir_bul(ad)
        if sehir:
            sehir.sicaklik_guncelle(yeni_sicaklik)
            return True
        return False

    def hava_durumu_goruntule(self, ad):
        sehir = self.sehir_bul(ad)
        if sehir:
            return str(sehir)
        return "Şehir bulunamadı!"

    def sicaklik_tavsiyesi(self, ad):
        sehir = self.sehir_bul(ad)
        if not sehir:
            return "Şehir bulunamadı!"

        sicaklik = sehir.sicaklik
        if sicaklik < 0:
            return "Soğuk, sıkı giyinin."
        elif 0 <= sicaklik <= 15:
            return "Serin, mont almayı unutmayın."
        else:
            return "Hava güzel, rahat giyin."


# Ana program
def main():
    hava_durumu = HavaDurumu()

    while True:
        print("\nHava Durumu Uygulaması")
        print("1. Şehir Ekle")
        print("2. Şehir Sıcaklığını Güncelle")
        print("3. Şehir Hava Durumunu Görüntüle")
        print("4. Şehir İçin Tavsiye Al")
        print("5. Çıkış")

        secim = input("Seçiminizi yapın: ")

        if secim == "1":
            ad = input("Şehir Adı: ")
            try:
                sicaklik = float(input("Sıcaklık (°C): "))
                if hava_durumu.sehir_ekle(ad, sicaklik):
                    print(f"{ad} başarıyla eklendi!")
                else:
                    print(f"{ad} zaten eklenmiş.")
            except ValueError:
                print("Geçersiz sıcaklık girdiniz!")
        elif secim == "2":
            ad = input("Şehir Adı: ")
            try:
                yeni_sicaklik = float(input("Yeni Sıcaklık (°C): "))
                if hava_durumu.sicaklik_guncelle(ad, yeni_sicaklik):
                    print(f"{ad} için sıcaklık güncellendi!")
                else:
                    print(f"{ad} bulunamadı!")
            except ValueError:
                print("Geçersiz sıcaklık girdiniz!")
        elif secim == "3":
            ad = input("Şehir Adı: ")
            print(hava_durumu.hava_durumu_goruntule(ad))
        elif secim == "4":
            ad = input("Şehir Adı: ")
            print(hava_durumu.sicaklik_tavsiyesi(ad))
        elif secim == "5":
            print("Çıkılıyor...")
            break
        else:
            print("Geçersiz seçim, tekrar deneyin!")


if __name__ == "__main__":
    main()

"""**Alışveriş Sepeti Uygulaması**"""

# Urun sınıfı: Ürün adı, fiyatı ve miktarını saklar
class Urun:
    def __init__(self, ad, fiyat, miktar=1):
        self.ad = ad
        self.fiyat = fiyat
        self.miktar = miktar

    def __str__(self):
        return f"{self.ad} - Fiyat: {self.fiyat}₺, Miktar: {self.miktar}"

# Sepet sınıfı: Ürün ekleme, çıkarma ve toplam hesaplama işlemleri yapar
class Sepet:
    def __init__(self):
        self.urunler = []

    def urun_ekle(self, urun):
        for mevcut_urun in self.urunler:
            if mevcut_urun.ad == urun.ad:
                mevcut_urun.miktar += urun.miktar
                return
        self.urunler.append(urun)

    def urun_cikar(self, urun_ad):
        for urun in self.urunler:
            if urun.ad == urun_ad:
                self.urunler.remove(urun)
                return True
        return False

    def toplam_tutar(self):
        return sum(urun.fiyat * urun.miktar for urun in self.urunler)

    def sepeti_listele(self):
        if not self.urunler:
            print("Sepetiniz boş!")
        else:
            for urun in self.urunler:
                print(urun)

# Ana program
def main():
    sepet = Sepet()

    while True:
        print("\nAlışveriş Sepeti Uygulaması")
        print("1. Ürün Ekle")
        print("2. Sepeti Listele")
        print("3. Sepetten Ürün Çıkar")
        print("4. Toplam Tutarı Görüntüle")
        print("5. Çıkış")

        secim = input("Seçiminizi yapın: ")

        if secim == "1":
            ad = input("Ürün Adı: ")
            try:
                fiyat = float(input("Ürün Fiyatı (₺): "))
                miktar = int(input("Ürün Miktarı: "))
                urun = Urun(ad, fiyat, miktar)
                sepet.urun_ekle(urun)
                print(f"{ad} sepetinize eklendi!")
            except ValueError:
                print("Geçersiz fiyat veya miktar girdiniz!")
        elif secim == "2":
            print("\nSepetinizdeki Ürünler:")
            sepet.sepeti_listele()
        elif secim == "3":
            ad = input("Sepetten çıkarılacak ürünün adı: ")
            if sepet.urun_cikar(ad):
                print(f"{ad} sepetinizden çıkarıldı!")
            else:
                print(f"{ad} sepetinizde bulunmamaktadır.")
        elif secim == "4":
            print(f"Toplam Tutar: {sepet.toplam_tutar()}₺")
        elif secim == "5":
            print("Çıkılıyor...")
            break
        else:
            print("Geçersiz seçim, tekrar deneyin!")

if __name__ == "__main__":
    main()

"""**Not Defteri (Notebook)**"""

import datetime

# Not sınıfı: Not içeriği ve tarihi tutar
class Not:
    def __init__(self, icerik):
        self.icerik = icerik
        self.tarih = datetime.datetime.now()

    def __str__(self):
        return f"{self.tarih.strftime('%Y-%m-%d %H:%M:%S')} - {self.icerik}"

# NotDefteri sınıfı: Not ekleme, listeleme, silme işlemlerini yapar
class NotDefteri:
    def __init__(self):
        self.notlar = []

    def not_ekle(self, icerik):
        yeni_not = Not(icerik)
        self.notlar.append(yeni_not)

    def not_sil(self, index):
        if 0 <= index < len(self.notlar):
            self.notlar.pop(index)
            return True
        return False

    def notlari_listele(self):
        if not self.notlar:
            print("Hiç not bulunmamaktadır.")
        else:
            for i, not_ in enumerate(self.notlar):
                print(f"{i + 1}. {not_}")

    def notlari_kaydet(self, dosya_adi):
        with open(dosya_adi, 'w') as file:
            for not_ in self.notlar:
                file.write(str(not_) + '\n')

    def notlari_yukle(self, dosya_adi):
        try:
            with open(dosya_adi, 'r') as file:
                self.notlar = []
                for line in file:
                    tarih_str, icerik = line.strip().split(' - ', 1)
                    tarih = datetime.datetime.strptime(tarih_str, '%Y-%m-%d %H:%M:%S')
                    yeni_not = Not(icerik)
                    yeni_not.tarih = tarih
                    self.notlar.append(yeni_not)
        except FileNotFoundError:
            print(f"{dosya_adi} dosyası bulunamadı.")

# Ana program
def main():
    not_defteri = NotDefteri()

    # Daha önce kaydedilen notları yükle
    not_defteri.notlari_yukle('notlar.txt')

    while True:
        print("\nNot Defteri Uygulaması")
        print("1. Not Ekle")
        print("2. Notları Listele")
        print("3. Not Sil")
        print("4. Notları Kaydet")
        print("5. Çıkış")

        secim = input("Seçiminizi yapın: ")

        if secim == "1":
            icerik = input("Not içeriği: ")
            not_defteri.not_ekle(icerik)
            print("Not eklendi!")
        elif secim == "2":
            print("\nNotlarınız:")
            not_defteri.notlari_listele()
        elif secim == "3":
            try:
                index = int(input("Silmek istediğiniz notun numarasını girin: ")) - 1
                if not_defteri.not_sil(index):
                    print("Not silindi!")
                else:
                    print("Geçersiz not numarası!")
            except ValueError:
                print("Geçersiz giriş!")
        elif secim == "4":
            not_defteri.notlari_kaydet('notlar.txt')
            print("Notlar kaydedildi!")
        elif secim == "5":
            print("Çıkılıyor...")
            break
        else:
            print("Geçersiz seçim, tekrar deneyin!")

if __name__ == "__main__":
    main()

"""**Film Yönetim Sistemi**"""

# Film sınıfı: Film adı, yönetmen, yıl ve tür bilgilerini tutar
class Film:
    def __init__(self, ad, yonetmen, yil, tur):
        self.ad = ad
        self.yonetmen = yonetmen
        self.yil = yil
        self.tur = tur

    def __str__(self):
        return f"Ad: {self.ad}, Yönetmen: {self.yonetmen}, Yıl: {self.yil}, Tür: {self.tur}"

# FilmYoneticisi sınıfı: Filmleri ekleme, silme, listeleme işlemleri yapılır
class FilmYoneticisi:
    def __init__(self):
        self.filmler = []

    def film_ekle(self, film):
        self.filmler.append(film)

    def film_sil(self, film_ad):
        for film in self.filmler:
            if film.ad == film_ad:
                self.filmler.remove(film)
                return True
        return False

    def filmleri_listele(self):
        if not self.filmler:
            print("Hiç film bulunmamaktadır.")
        else:
            for i, film in enumerate(self.filmler):
                print(f"{i + 1}. {film}")

    def filmleri_yila_gore_listele(self, yil):
        print(f"{yil} Yılında çıkan Filmler:")
        filmler = [film for film in self.filmler if film.yil == yil]
        if filmler:
            for film in filmler:
                print(film)
        else:
            print("Bu yıl için film bulunmamaktadır.")

    def filmleri_ture_gore_listele(self, tur):
        print(f"{tur} Türündeki Filmler:")
        filmler = [film for film in self.filmler if film.tur.lower() == tur.lower()]
        if filmler:
            for film in filmler:
                print(film)
        else:
            print("Bu türde film bulunmamaktadır.")

# Ana program
def main():
    yonetici = FilmYoneticisi()

    while True:
        print("\nFilm Yönetim Sistemi")
        print("1. Film Ekle")
        print("2. Filmleri Listele")
        print("3. Filmleri Yıla Göre Listele")
        print("4. Filmleri Türe Göre Listele")
        print("5. Film Sil")
        print("6. Çıkış")

        secim = input("Seçiminizi yapın: ")

        if secim == "1":
            ad = input("Film Adı: ")
            yonetmen = input("Yönetmen: ")
            try:
                yil = int(input("Yıl: "))
                tur = input("Tür: ")
                film = Film(ad, yonetmen, yil, tur)
                yonetici.film_ekle(film)
                print(f"{ad} filmi eklendi!")
            except ValueError:
                print("Geçersiz yıl girdiniz!")
        elif secim == "2":
            print("\nFilmleriniz:")
            yonetici.filmleri_listele()
        elif secim == "3":
            try:
                yil = int(input("Listelemek istediğiniz yılı girin: "))
                yonetici.filmleri_yila_gore_listele(yil)
            except ValueError:
                print("Geçersiz yıl girdiniz!")
        elif secim == "4":
            tur = input("Listelemek istediğiniz türü girin: ")
            yonetici.filmleri_ture_gore_listele(tur)
        elif secim == "5":
            ad = input("Silmek istediğiniz film adını girin: ")
            if yonetici.film_sil(ad):
                print(f"{ad} filmi silindi!")
            else:
                print(f"{ad} filmi bulunamadı.")
        elif secim == "6":
            print("Çıkılıyor...")
            break
        else:
            print("Geçersiz seçim, tekrar deneyin!")

if __name__ == "__main__":
    main()